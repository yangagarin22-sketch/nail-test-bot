import os
import requests
import json
from datetime import datetime

def test_unsplash_search():
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ACCESS_KEY = os.getenv('UNSPLASH_ACCESS_KEY')
    
    if not ACCESS_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: UNSPLASH_ACCESS_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    query = "pastel ombre nails white daisies gold leaf nail art closeup professional manicure spring"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    url = f"https://api.unsplash.com/search/photos?query={query}&per_page=15&order_by=popularity"
    
    headers = {
        "Authorization": f"Client-ID {ACCESS_KEY}"
    }
    
    try:
        print("=" * 70)
        print(f"üé® –¢–û–ß–ù–´–ô –ü–û–ò–°–ö –î–õ–Ø –ú–ê–ù–ò–ö–Æ–†–ù–´–• –°–¢–ê–¢–ï–ô")
        print("=" * 70)
        print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ù–µ–∂–Ω–æ–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ –ø–∞—Å—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–Ω–∞—Ö —Å –±–µ–ª—ã–º–∏ —Ä–æ–º–∞—à–∫–∞–º–∏ –∏ –∑–æ–ª–æ—Ç—ã–º–∏ –≤–∫—Ä–∞–ø–ª–µ–Ω–∏—è–º–∏")
        print(f"üåê –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: {query}")
        print(f"üåç –†–µ–≥–∏–æ–Ω Render: Frankfurt (EU Central)")
        print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
        print("-" * 70)
        
        response = requests.get(url, headers=headers, timeout=15)
        
        print(f"üì° HTTP –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            images = data.get('results', [])
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Å–µ–≥–æ: {len(images)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            popular_images = []
            for img in images:
                likes = img.get('likes', 0)
                downloads = img.get('downloads', 0)
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ç–æ
                if likes >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –ª–∞–π–∫–æ–≤
                    popular_images.append(img)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∞–π–∫–∞–º (–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)
            popular_images.sort(key=lambda x: x.get('likes', 0), reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
            top_images = popular_images[:5]
            
            print(f"üéØ –û—Ç–æ–±—Ä–∞–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(top_images)}")
            print("=" * 70)
            
            successful_count = 0
            for i, img in enumerate(top_images):
                try:
                    image_url = img.get('urls', {}).get('regular', '–ù–µ—Ç URL')
                    author = img.get('user', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
                    username = img.get('user', {}).get('username', '')
                    description = img.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                    alt_description = img.get('alt_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                    width = img.get('width', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    height = img.get('height', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    downloads = img.get('downloads', 0)
                    likes = img.get('likes', 0)
                    
                    if image_url == '–ù–µ—Ç URL':
                        continue
                    
                    successful_count += 1
                    print(f"\nüèÜ –§–û–¢–û #{i+1} (–†–µ–π—Ç–∏–Ω–≥: {likes}‚ù§Ô∏è {downloads}‚¨áÔ∏è)")
                    print(f"   üë§ –ê–≤—Ç–æ—Ä: {author} (@{username})")
                    print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or alt_description}")
                    print(f"   üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {likes} –ª–∞–π–∫–æ–≤, {downloads} –∑–∞–≥—Ä—É–∑–æ–∫")
                    print(f"   üîó –ü—Ä–æ—Å–º–æ—Ç—Ä: {image_url}")
                    print(f"   üì• –°–∫–∞—á–∞—Ç—å: https://unsplash.com/photos/{img.get('id', '')}/download")
                    print(f"   üìè –†–∞–∑–º–µ—Ä: {width}x{height}")
                    
                except Exception as img_error:
                    print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ #{i+1}: {img_error}")
                    continue
                    
            return successful_count
            
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê API: {response.text}")
            return 0
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        return 0

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –º–∞–Ω–∏–∫—é—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π...")
    successful_images = test_unsplash_search()
    
    if successful_images > 0:
        print(f"\nüéâ –ü–û–ò–°–ö –£–°–ü–ï–®–ï–ù! –ù–∞–π–¥–µ–Ω–æ {successful_images} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ")
        print(f"üì∏ –§–æ—Ç–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ª–∞–π–∫–∞–º)")
    else:
        print(f"\nüòû –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
